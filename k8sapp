#!/bin/bash

# To activate tab completion: complete -C k8sapp k8sapp

set -e

declare NS=harbor

x.fetch() {
  mkdir -p helm
  helm repo add harbor https://helm.goharbor.io
  cd helm
  helm fetch harbor/harbor
  curl -sSLO https://helm.goharbor.io/index.yaml
  cd -
  helm template --namespace $NS $NS helm/*.tgz > $NS.yaml
}

x.configure() {
  printf "apiVersion: v1
kind: Namespace
metadata:
  name: $NS
" > ns.yaml
}

x.install() {
  kubectl apply --namespace $NS -f ns.yaml -f harbor.yaml
  echo "For local testing consider:"
  echo "  k port-forward pod/harbor-portal-... 8081:8080 --namespace $NS"
  echo "  open https://127.0.0.1:8081 (admin:Harbor12345)"
}

x.update() {
  echo would update
}

x.uninstall() {
  echo would uninstall
}

x.check() {
  echo would check
}

# add functions beginning with x. to COMMANDS
while IFS= read -r line; do
  [[ $line =~ ^declare\ -f\ x\. ]] || continue
  COMMANDS+=( "${line##declare -f x.}" )
done < <(declare -F)
mapfile -t COMMANDS < \
  <(LC_COLLATE=C sort < <(printf "%s\n" "${COMMANDS[@]}"))

# complete if completion context detect (complete -C kapp kapp)
if [[ -n $COMP_LINE ]]; then
  line=${COMP_LINE#* }
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:${#line}} == "${line,,}" ]] && echo "$c"
  done
  exit
fi

# delegate to COMMAND passed as first argument
if [[ -n "$1" ]]; then
  declare CMD="$1"; shift
  for c in "${COMMANDS[@]}"; do
    if [[ $c == "$CMD" ]]; then
      "x.$CMD" "$@"
      exit $?
    fi
  done
fi
